{"filter":false,"title":"evens.py","tooltip":"/evens.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":8,"column":71},"end":{"row":8,"column":72},"action":"insert","lines":["u"],"id":212}],[{"start":{"row":8,"column":70},"end":{"row":8,"column":72},"action":"remove","lines":["Mu"],"id":213},{"start":{"row":8,"column":70},"end":{"row":8,"column":78},"action":"insert","lines":["Multiple"]}],[{"start":{"row":8,"column":78},"end":{"row":8,"column":79},"action":"insert","lines":[" "],"id":214},{"start":{"row":8,"column":79},"end":{"row":8,"column":80},"action":"insert","lines":["n"]}],[{"start":{"row":8,"column":80},"end":{"row":8,"column":81},"action":"insert","lines":["u"],"id":215}],[{"start":{"row":8,"column":79},"end":{"row":8,"column":81},"action":"remove","lines":["nu"],"id":216},{"start":{"row":8,"column":79},"end":{"row":8,"column":86},"action":"insert","lines":["numbers"]}],[{"start":{"row":8,"column":86},"end":{"row":8,"column":87},"action":"insert","lines":[","],"id":217}],[{"start":{"row":8,"column":87},"end":{"row":8,"column":88},"action":"insert","lines":[" "],"id":218},{"start":{"row":8,"column":88},"end":{"row":8,"column":89},"action":"insert","lines":["f"]},{"start":{"row":8,"column":89},"end":{"row":8,"column":90},"action":"insert","lines":["o"]}],[{"start":{"row":8,"column":90},"end":{"row":8,"column":91},"action":"insert","lines":["u"],"id":219},{"start":{"row":8,"column":91},"end":{"row":8,"column":92},"action":"insert","lines":["r"]}],[{"start":{"row":8,"column":92},"end":{"row":8,"column":93},"action":"insert","lines":[" "],"id":220},{"start":{"row":8,"column":93},"end":{"row":8,"column":94},"action":"insert","lines":["e"]}],[{"start":{"row":8,"column":94},"end":{"row":8,"column":95},"action":"insert","lines":["v"],"id":221},{"start":{"row":8,"column":95},"end":{"row":8,"column":96},"action":"insert","lines":["e"]}],[{"start":{"row":8,"column":93},"end":{"row":8,"column":96},"action":"remove","lines":["eve"],"id":222},{"start":{"row":8,"column":93},"end":{"row":8,"column":97},"action":"insert","lines":["even"]}],[{"start":{"row":8,"column":98},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":223}],[{"start":{"row":9,"column":0},"end":{"row":9,"column":1},"action":"insert","lines":["a"],"id":224},{"start":{"row":9,"column":1},"end":{"row":9,"column":2},"action":"insert","lines":["s"]},{"start":{"row":9,"column":2},"end":{"row":9,"column":3},"action":"insert","lines":["s"]},{"start":{"row":9,"column":3},"end":{"row":9,"column":4},"action":"insert","lines":["e"]}],[{"start":{"row":9,"column":0},"end":{"row":9,"column":4},"action":"remove","lines":["asse"],"id":225},{"start":{"row":9,"column":0},"end":{"row":9,"column":6},"action":"insert","lines":["assert"]}],[{"start":{"row":9,"column":6},"end":{"row":9,"column":7},"action":"insert","lines":[" "],"id":226},{"start":{"row":9,"column":7},"end":{"row":9,"column":8},"action":"insert","lines":["e"]},{"start":{"row":9,"column":8},"end":{"row":9,"column":9},"action":"insert","lines":["v"]}],[{"start":{"row":9,"column":9},"end":{"row":9,"column":10},"action":"insert","lines":["e"],"id":227}],[{"start":{"row":9,"column":7},"end":{"row":9,"column":10},"action":"remove","lines":["eve"],"id":228},{"start":{"row":9,"column":7},"end":{"row":9,"column":29},"action":"insert","lines":["even_number_of_evens()"]}],[{"start":{"row":9,"column":28},"end":{"row":9,"column":30},"action":"insert","lines":["[]"],"id":229}],[{"start":{"row":9,"column":29},"end":{"row":9,"column":30},"action":"insert","lines":["1"],"id":230},{"start":{"row":9,"column":30},"end":{"row":9,"column":31},"action":"insert","lines":[","]}],[{"start":{"row":9,"column":31},"end":{"row":9,"column":32},"action":"insert","lines":[" "],"id":231},{"start":{"row":9,"column":32},"end":{"row":9,"column":33},"action":"insert","lines":["3"]}],[{"start":{"row":9,"column":33},"end":{"row":9,"column":34},"action":"insert","lines":[","],"id":232}],[{"start":{"row":9,"column":34},"end":{"row":9,"column":35},"action":"insert","lines":[" "],"id":233},{"start":{"row":9,"column":35},"end":{"row":9,"column":36},"action":"insert","lines":["9"]}],[{"start":{"row":9,"column":38},"end":{"row":9,"column":39},"action":"insert","lines":[" "],"id":234}],[{"start":{"row":9,"column":39},"end":{"row":9,"column":40},"action":"insert","lines":["="],"id":235},{"start":{"row":9,"column":40},"end":{"row":9,"column":41},"action":"insert","lines":["="]}],[{"start":{"row":9,"column":41},"end":{"row":9,"column":42},"action":"insert","lines":[" "],"id":236}],[{"start":{"row":9,"column":42},"end":{"row":9,"column":43},"action":"insert","lines":["F"],"id":237}],[{"start":{"row":9,"column":42},"end":{"row":9,"column":43},"action":"remove","lines":["F"],"id":238},{"start":{"row":9,"column":42},"end":{"row":9,"column":47},"action":"insert","lines":["False"]}],[{"start":{"row":9,"column":47},"end":{"row":9,"column":48},"action":"insert","lines":[","],"id":239}],[{"start":{"row":9,"column":48},"end":{"row":9,"column":49},"action":"insert","lines":[" "],"id":240}],[{"start":{"row":9,"column":49},"end":{"row":9,"column":51},"action":"insert","lines":["\"\""],"id":241}],[{"start":{"row":9,"column":50},"end":{"row":9,"column":51},"action":"insert","lines":["N"],"id":242},{"start":{"row":9,"column":51},"end":{"row":9,"column":52},"action":"insert","lines":["o"]}],[{"start":{"row":9,"column":52},"end":{"row":9,"column":53},"action":"insert","lines":[" "],"id":243},{"start":{"row":9,"column":53},"end":{"row":9,"column":54},"action":"insert","lines":["e"]},{"start":{"row":9,"column":54},"end":{"row":9,"column":55},"action":"insert","lines":["v"]}],[{"start":{"row":9,"column":55},"end":{"row":9,"column":56},"action":"insert","lines":["e"],"id":244}],[{"start":{"row":9,"column":53},"end":{"row":9,"column":56},"action":"remove","lines":["eve"],"id":245},{"start":{"row":9,"column":53},"end":{"row":9,"column":57},"action":"insert","lines":["even"]}],[{"start":{"row":9,"column":57},"end":{"row":9,"column":58},"action":"insert","lines":[" "],"id":246},{"start":{"row":9,"column":58},"end":{"row":9,"column":59},"action":"insert","lines":["n"]},{"start":{"row":9,"column":59},"end":{"row":9,"column":60},"action":"insert","lines":["u"]}],[{"start":{"row":9,"column":58},"end":{"row":9,"column":60},"action":"remove","lines":["nu"],"id":247},{"start":{"row":9,"column":58},"end":{"row":9,"column":65},"action":"insert","lines":["numbers"]}],[{"start":{"row":9,"column":66},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":248},{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"insert","lines":["p"],"id":249},{"start":{"row":11,"column":1},"end":{"row":11,"column":2},"action":"insert","lines":["r"]}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":2},"action":"remove","lines":["pr"],"id":250},{"start":{"row":11,"column":0},"end":{"row":11,"column":5},"action":"insert","lines":["print"]}],[{"start":{"row":11,"column":5},"end":{"row":11,"column":7},"action":"insert","lines":["()"],"id":251}],[{"start":{"row":11,"column":6},"end":{"row":11,"column":8},"action":"insert","lines":["\"\""],"id":252}],[{"start":{"row":11,"column":7},"end":{"row":11,"column":8},"action":"insert","lines":["A"],"id":253},{"start":{"row":11,"column":8},"end":{"row":11,"column":9},"action":"insert","lines":["l"]}],[{"start":{"row":11,"column":9},"end":{"row":11,"column":10},"action":"insert","lines":["l"],"id":254}],[{"start":{"row":11,"column":10},"end":{"row":11,"column":11},"action":"insert","lines":[" "],"id":255},{"start":{"row":11,"column":11},"end":{"row":11,"column":12},"action":"insert","lines":["t"]},{"start":{"row":11,"column":12},"end":{"row":11,"column":13},"action":"insert","lines":["h"]},{"start":{"row":11,"column":13},"end":{"row":11,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":11,"column":14},"end":{"row":11,"column":15},"action":"insert","lines":[" "],"id":256}],[{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"insert","lines":["t"],"id":257},{"start":{"row":11,"column":16},"end":{"row":11,"column":17},"action":"insert","lines":["e"]},{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"insert","lines":["s"]},{"start":{"row":11,"column":18},"end":{"row":11,"column":19},"action":"insert","lines":["t"]}],[{"start":{"row":11,"column":19},"end":{"row":11,"column":20},"action":"insert","lines":["a"],"id":258}],[{"start":{"row":11,"column":20},"end":{"row":11,"column":21},"action":"insert","lines":[" "],"id":259},{"start":{"row":11,"column":21},"end":{"row":11,"column":22},"action":"insert","lines":["p"]},{"start":{"row":11,"column":22},"end":{"row":11,"column":23},"action":"insert","lines":["a"]},{"start":{"row":11,"column":23},"end":{"row":11,"column":24},"action":"insert","lines":["s"]}],[{"start":{"row":11,"column":24},"end":{"row":11,"column":25},"action":"insert","lines":["s"],"id":260}],[{"start":{"row":11,"column":21},"end":{"row":11,"column":25},"action":"remove","lines":["pass"],"id":261},{"start":{"row":11,"column":21},"end":{"row":11,"column":27},"action":"insert","lines":["passed"]}],[{"start":{"row":11,"column":27},"end":{"row":11,"column":28},"action":"insert","lines":["!"],"id":262}],[{"start":{"row":5,"column":0},"end":{"row":5,"column":1},"action":"insert","lines":["#"],"id":263}],[{"start":{"row":6,"column":0},"end":{"row":6,"column":1},"action":"insert","lines":["#"],"id":264}],[{"start":{"row":6,"column":1},"end":{"row":6,"column":2},"action":"insert","lines":[" "],"id":265}],[{"start":{"row":5,"column":1},"end":{"row":5,"column":2},"action":"insert","lines":[" "],"id":266}],[{"start":{"row":7,"column":0},"end":{"row":7,"column":1},"action":"insert","lines":["#"],"id":267}],[{"start":{"row":7,"column":1},"end":{"row":7,"column":2},"action":"insert","lines":[" "],"id":268}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":1},"action":"insert","lines":["#"],"id":269}],[{"start":{"row":8,"column":1},"end":{"row":8,"column":2},"action":"insert","lines":[" "],"id":270}],[{"start":{"row":9,"column":0},"end":{"row":9,"column":1},"action":"insert","lines":["#"],"id":271}],[{"start":{"row":9,"column":1},"end":{"row":9,"column":2},"action":"insert","lines":[" "],"id":272}],[{"start":{"row":0,"column":34},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":273},{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["",""],"id":274}],[{"start":{"row":1,"column":1},"end":{"row":1,"column":2},"action":"insert","lines":["r"],"id":275},{"start":{"row":1,"column":2},"end":{"row":1,"column":3},"action":"insert","lines":["e"]}],[{"start":{"row":1,"column":3},"end":{"row":1,"column":4},"action":"insert","lines":["t"],"id":276},{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["u"]}],[{"start":{"row":1,"column":1},"end":{"row":1,"column":5},"action":"remove","lines":["retu"],"id":277},{"start":{"row":1,"column":1},"end":{"row":1,"column":7},"action":"insert","lines":["return"]}],[{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":[" "],"id":278},{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["F"]}],[{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"remove","lines":["F"],"id":279},{"start":{"row":1,"column":8},"end":{"row":1,"column":13},"action":"insert","lines":["False"]}],[{"start":{"row":1,"column":13},"end":{"row":1,"column":14},"action":"insert","lines":[" "],"id":280}],[{"start":{"row":11,"column":19},"end":{"row":11,"column":20},"action":"remove","lines":["a"],"id":281}],[{"start":{"row":11,"column":19},"end":{"row":11,"column":20},"action":"insert","lines":["s"],"id":282}],[{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"remove","lines":["t"],"id":283},{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"remove","lines":["e"]},{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"remove","lines":["s"]},{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"remove","lines":["t"]},{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"remove","lines":["s"]},{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"remove","lines":[" "]}],[{"start":{"row":11,"column":13},"end":{"row":11,"column":14},"action":"remove","lines":["e"],"id":284}],[{"start":{"row":11,"column":13},"end":{"row":11,"column":14},"action":"remove","lines":[" "],"id":285}],[{"start":{"row":11,"column":12},"end":{"row":11,"column":13},"action":"remove","lines":["h"],"id":286},{"start":{"row":11,"column":11},"end":{"row":11,"column":12},"action":"remove","lines":["t"]}],[{"start":{"row":11,"column":10},"end":{"row":11,"column":11},"action":"remove","lines":[" "],"id":287}],[{"start":{"row":11,"column":10},"end":{"row":11,"column":11},"action":"insert","lines":[" "],"id":288},{"start":{"row":11,"column":11},"end":{"row":11,"column":12},"action":"insert","lines":["t"]},{"start":{"row":11,"column":12},"end":{"row":11,"column":13},"action":"insert","lines":["e"]},{"start":{"row":11,"column":13},"end":{"row":11,"column":14},"action":"insert","lines":["s"]},{"start":{"row":11,"column":14},"end":{"row":11,"column":15},"action":"insert","lines":["t"]}],[{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"insert","lines":["s"],"id":289}],[{"start":{"row":11,"column":16},"end":{"row":11,"column":17},"action":"insert","lines":[" "],"id":290}],[{"start":{"row":2,"column":4},"end":{"row":30,"column":29},"action":"insert","lines":["\"\"\"","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number od even numbers is even, return `True`","    \"\"\"","","    # Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found","        evens = 0","        ","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","    ","    if evens == 0:","        return False","    else:","        return evens % 2 == 0"],"id":291}],[{"start":{"row":30,"column":29},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":292},{"start":{"row":31,"column":0},"end":{"row":31,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":31,"column":4},"end":{"row":31,"column":27},"action":"insert","lines":["# Our set of test cases"],"id":293}],[{"start":{"row":39,"column":0},"end":{"row":40,"column":0},"action":"insert","lines":["",""],"id":294}],[{"start":{"row":40,"column":0},"end":{"row":41,"column":20},"action":"insert","lines":["# If all the test cases pass, print some successful info to the console to let","# the developer know"],"id":295}],[{"start":{"row":30,"column":29},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":296},{"start":{"row":31,"column":0},"end":{"row":31,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":2,"column":3},"end":{"row":2,"column":7},"action":"remove","lines":[" \"\"\""],"id":297}],[{"start":{"row":2,"column":2},"end":{"row":2,"column":3},"action":"remove","lines":[" "],"id":298},{"start":{"row":2,"column":1},"end":{"row":2,"column":2},"action":"remove","lines":[" "]}],[{"start":{"row":2,"column":1},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":299},{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":[" "]}],[{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"insert","lines":[" "],"id":300},{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"insert","lines":[" "]},{"start":{"row":3,"column":3},"end":{"row":3,"column":4},"action":"insert","lines":[" "]},{"start":{"row":3,"column":4},"end":{"row":3,"column":5},"action":"insert","lines":[" "]}],[{"start":{"row":3,"column":5},"end":{"row":3,"column":8},"action":"insert","lines":["\"\"\""],"id":301}],[{"start":{"row":4,"column":70},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":302},{"start":{"row":5,"column":0},"end":{"row":5,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":2,"column":1},"end":{"row":3,"column":0},"action":"remove","lines":["",""],"id":303}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":13},"action":"remove","lines":[" return False"],"id":304}],[{"start":{"row":0,"column":34},"end":{"row":1,"column":4},"action":"remove","lines":["","    "],"id":305}],[{"start":{"row":13,"column":39},"end":{"row":14,"column":0},"action":"insert","lines":["",""],"id":306},{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"remove","lines":["    "],"id":307},{"start":{"row":13,"column":39},"end":{"row":14,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":43,"column":26},"action":"remove","lines":["def even_number_of_evens(numbers):","      \"\"\"","    Returns the number of even numbers contained in a list of numbers.","    ","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number od even numbers is even, return `True`","    \"\"\"","","    # Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found","        evens = 0","        ","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","    ","    if evens == 0:","        return False","    else:","        return evens % 2 == 0","        ","    # Our set of test cases    ","assert even_number_of_evens([]) == False, \"No numbers\"","# assert even_number_of_evens([2]) == False, \"One even number\"","# assert even_number_of_evens([2,4]) == True, \"Two numbers\"","# assert even_number_of_evens([2, 3]) == False, \"Two numbers, only one even\"","# assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8]) == False, \"Multiple numbers, three even\"","# assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8, 5, 12]) == True, \"Multiple numbers, four even\"","# assert even_number_of_evens([1, 3, 9]) == False, \"No even numbers\"","","# If all the test cases pass, print some successful info to the console to let","# the developer know","print(\"All tests passed!\")"],"id":308}],[{"start":{"row":0,"column":0},"end":{"row":42,"column":26},"action":"insert","lines":["def even_number_of_evens(numbers):","    \"\"\"","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number od even numbers is even, return `True`","    \"\"\"","","    # Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found","        evens = 0","        ","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","    ","    if evens == 0:","        return False","    else:","        return evens % 2 == 0","","# Our set of test cases","assert even_number_of_evens([]) == False, \"No numbers\"","assert even_number_of_evens([2]) == False, \"One even number\"","assert even_number_of_evens([2, 4]) == True, \"Two even numbers\"","assert even_number_of_evens([2, 3]) == False, \"Two numbers, only one even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8]) == False, \"Multiple numbers, three even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8, 5, 12]) == True, \"Multiple numbers, four even\"","assert even_number_of_evens([1, 3, 9]) == False, \"No even numbers\"","","# If all the test cases pass, print some successful info to the console to let","# the developer know","print(\"All tests passed!\")"],"id":309}],[{"start":{"row":1,"column":7},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":310},{"start":{"row":2,"column":0},"end":{"row":2,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":0,"column":0},"end":{"row":43,"column":26},"action":"remove","lines":["def even_number_of_evens(numbers):","    \"\"\"","    ","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number od even numbers is even, return `True`","    \"\"\"","","    # Check to see if the list is empty","    if numbers == []:","        return False","    else:","        # Set a `number_of_evens` variable that will be incremented each time","        # an even number is found","        evens = 0","        ","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    for number in numbers:","        if number % 2 == 0:","            evens += 1","    ","    if evens == 0:","        return False","    else:","        return evens % 2 == 0","","# Our set of test cases","assert even_number_of_evens([]) == False, \"No numbers\"","assert even_number_of_evens([2]) == False, \"One even number\"","assert even_number_of_evens([2, 4]) == True, \"Two even numbers\"","assert even_number_of_evens([2, 3]) == False, \"Two numbers, only one even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8]) == False, \"Multiple numbers, three even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8, 5, 12]) == True, \"Multiple numbers, four even\"","assert even_number_of_evens([1, 3, 9]) == False, \"No even numbers\"","","# If all the test cases pass, print some successful info to the console to let","# the developer know","print(\"All tests passed!\")"],"id":311}],[{"start":{"row":0,"column":0},"end":{"row":38,"column":26},"action":"insert","lines":["def is_even(number):","    \"\"\"","    A simple helper function that will check to see if a number is even or not","    `number` is the number that we wish to check","    Returns True or False depending on whether or not the number is evenly","    divisble by 2","    \"\"\"","    return number % 2 == 0","","","def even_number_of_evens(numbers):","    \"\"\"","    Returns the number of even numbers contained in a list of numbers.","    `numbers` should be a list containing numbers","    ","    Returns either True or False based on a number of criteria.","        - if `numbers` is empty, return `False`","        - if the number of even numbers is odd, return `False`","        - if the number of even numbers is 0, return `False`","        - if the number of even numbers is even, return `True`","    \"\"\"","        ","    # Iterate of over each item and if it's an even number, increment the","    # `evens` variable","    evens = sum([1 for n in numbers if is_even(n)])","    return False if evens == 0 else is_even(evens)","","# Our set of test cases","assert even_number_of_evens([]) == False, \"No numbers\"","assert even_number_of_evens([2]) == False, \"One even number\"","assert even_number_of_evens([2, 4]) == True, \"Two even numbers\"","assert even_number_of_evens([2, 3]) == False, \"Two numbers, only one even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8]) == False, \"Multiple numbers, three even\"","assert even_number_of_evens([2, 3, 9, 10, 13, 7, 8, 5, 12]) == True, \"Multiple numbers, four even\"","assert even_number_of_evens([1, 3, 9]) == False, \"No even numbers\"","","# If all the test cases pass, print some successful info to the console to let","# the developer know","print(\"All tests passed!\")"],"id":312}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":5,"state":"qqstring3","mode":"ace/mode/python"}},"timestamp":1562625882381,"hash":"7f040fd676c66015ea8ae8e8575bd48e728d35d8"}